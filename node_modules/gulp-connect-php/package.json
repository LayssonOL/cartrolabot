{
  "_from": "gulp-connect-php",
  "_id": "gulp-connect-php@1.0.3",
  "_inBundle": false,
  "_integrity": "sha512-onGNLvTdR5hgUn3DVIwfHwi5nWR8Bm8CdxKliJpg0t2sQJ6dDvMktowGQ0nl97L2C7on7zr2fQ93AoR6DWa/VQ==",
  "_location": "/gulp-connect-php",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gulp-connect-php",
    "fetchSpec": "latest",
    "name": "gulp-connect-php",
    "raw": "gulp-connect-php",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-connect-php/-/gulp-connect-php-1.0.3.tgz",
  "_shasum": "0b15e21ee9d70265edd0f12e2b36e2210d278e45",
  "_spec": "gulp-connect-php",
  "_where": "/home/laysson/Documents/ReactJS_Hello_World/http-request",
  "author": {
    "name": "micahblu"
  },
  "bugs": {
    "url": "https://github.com/micahblu/gulp-php/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bin-version-check": "^2.1.0",
    "opn": "^1.0.0"
  },
  "deprecated": false,
  "description": "Starts a php server",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-es2016": "^6.24.1",
    "babel-preset-es2017": "^6.24.1",
    "mocha": "^3.2.0",
    "supertest": "^3.0.0"
  },
  "homepage": "https://github.com/micahblu/gulp-connect-php#readme",
  "keywords": [
    "connect",
    "gulp",
    "php",
    "server"
  ],
  "license": "MIT",
  "main": "index-compat.js",
  "name": "gulp-connect-php",
  "optionalDependencies": {},
  "readme": "# gulp-connect-php\n\n***REQUIRES NODE 4 OR GREATER***\n\n> Start a [PHP-server](http://php.net/manual/en/features.commandline.webserver.php)\n\nThis is pretty much a gulp version of [@sindresorhus's](https://github.com/sindresorhus) [grunt-php](https://github.com/sindresorhus/grunt-php) and acts as a _basic version_ drop-in replacement for [gulp-connect](https://www.npmjs.com/package/gulp-connect), though please note not all features from gulp-connect are supported with gulp-connect-php. I am open to supporting other features and pull requests that implement them.\n\nUses the built-in server in PHP 5.4.0+.\n\n## Install\n\n```sh\n$ npm install --save-dev gulp-connect-php\n```\n\n## Usage\n\n### As a Singleton\n```js\nvar gulp = require('gulp'),\n    connect = require('gulp-connect-php');\n\ngulp.task('connect', function() {\n\tconnect.server();\n});\n\ngulp.task('default', ['connect']);\n```\n\n### As an Instance\n```js\nvar gulp = require('gulp'),\n    connect = require('gulp-connect-php');\n\nlet server = new connect();\n\ngulp.task('connect', function() {\n\tserver.server();\n});\ngulp.task('disconnect', function() {\n\tserver.closeServer();\n});\n\ngulp.task('default', ['connect', 'disconnect']);\n```\n\n## Examples\n\n### Use it with Browser Sync\n\n```js\nvar gulp = require('gulp'),\n    connect = require('gulp-connect-php'),\n    browserSync = require('browser-sync');\n\ngulp.task('connect-sync', function() {\n  connect.server({}, function (){\n    browserSync({\n      proxy: '127.0.0.1:8000'\n    });\n  });\n\n  gulp.watch('**/*.php').on('change', function () {\n    browserSync.reload();\n  });\n});\n```\n\n### Advanced Option Manipulation\n\n```js\ngulp.task('connect', function() {\n  connect.server({\n    configCallback: function _configCallback(type, collection) {\n      // If you wish to leave one of the argument types alone, simply return the passed in collection.\n      if (type === connect.OPTIONS_SPAWN_OBJ) { // As the constant suggests, collection is an Object.\n\n        // Lets add a custom env var. Good for injecting AWS_RDS config variables.\n        collection.env = Object.assign({\n          MY_CUSTOM_ENV_VAR: \"env_var_value\"\n        }, process.env);\n\n        return collection;\n      } else if (type === connect.OPTIONS_PHP_CLI_ARR) { // As the constant suggests, collection is an Array.\n        let newArgs = [\n          '-e',                     // Generate extended information for debugger/profiler.\n          '-d', 'memory_limit=2G'   // Define INI entry, Up memory limit to 2G.\n        ];\n\n        // Ensure our argument switches appear before the rest.\n        return newArgs.concat(collection);\n      }\n    }\n  }, function _connected_callback() {\n    console.log(\"PHP Development Server Connected.\");\n  });\n});\n\ngulp.task('disconnect', function() {\n\tconnect.closeServer();\n});\n\ngulp.task('default', ['connect', 'disconnect']);\n```\n\n### Windows (via Batch file)\n\nWindows Batch file execution via a `%PATH%` specified batchfile is possible, but some considerations are required.\n\n1. The batch file must be on your `%PATH%` and executable with permissions of the invoker.\n2. You must pass the parameter set off to the PHP process.\n3. We have no -real- way of detecting an error state at this point.\n4. You must use the 'Advanced Option Maniulation' scheme and set the `shell` option on `spawn(...)`.\n\n#### Scenario\n\n- PHP is located at `C:\\Users\\mainuser\\Applications\\PHP\\7.0.17-NTS-VC14\\php.exe`.\n- The batch file is located at `C:\\Users\\mainuser\\MyProject\\strap\\php.bat`.\n- I have set `%PATH%` manually to `C:\\Users\\mainuser\\MyProject\\strap\\;%PATH%`.\n\n#### Contents of php.bat\n\n```batch\n@echo off\n\nREM We specify the whole path to PHP since the working directory is that of gulp...\nREM unless we also changed that in our gulp callback.\n\nC:\\Users\\mainuser\\Applications\\PHP\\7.0.17-NTS-VC14\\php.exe %*\n```\n\n#### Contents of our gulp task\n```js\ngulp.task('connect', function _gulp_connect_task() {\n  connect.server({\n    configCallback: function _configCallback(type, collection) {\n      if (type === connect.OPTIONS_SPAWN_OBJ) {\n        // Windows Batch files are NOT executable on their own. This will start a shell\n        // session then execute.\n        collection.shell = true;\n        return collection;\n      }\n    }\n  }, function _connected_callback() {\n    console.log(\"PHP Development Server Connected.\");\n  });\n});\n\ngulp.task('default', ['connect']);\n````\n\n## Options\n\n### port\n\nType: `number`  \nDefault: `8000`\n\nThe port on which you want to access the webserver. Task will fail if the port is already in use.\n\n### hostname\n\nType: `string`  \nDefault: `'127.0.0.1'` *(usually same as `localhost`)*\n\nThe hostname the webserver will use.\n\nUse `0.0.0.0` if you want it to be accessible from the outside.\n\n### base\n\nType: `string`  \nDefault: `'.'`\n\nFrom which folder the webserver will be served. Defaults to the directory of the gulpfile.\n\n### open\n\nType: `boolean`  \nDefault: `false`\n\nOpen the server in the browser when the task is triggered.\n\n### router\n\nType: `string`  \n\nOptionally specify the path to a [router script](http://php.net/manual/en/features.commandline.webserver.php#example-380) that is run at the start of each HTTP request. If this script returns `false`, then the requested resource is returned as-is. Otherwise the script's output is returned to the browser.\n\nExample router script:\n\n```php\n<?php\n// router.php\nif (preg_match('/\\.(?:png|jpg|jpeg|gif)$/', $_SERVER[\"REQUEST_URI\"])) {\n\treturn false;    // serve the requested resource as-is\n} else {\n\techo \"<p>Thanks for using gulp-connect-php :)</p>\";\n}\n?>\n```\n\n### bin\n\nType: `string`  \nDefault: `'php'`\n\nPath to the PHP binary. Useful if you have multiple versions of PHP installed.\n\n### ini\n\nType: `string`  \nDefault: Built-in `php.ini`\n\nPath to a custom [`php.ini`](http://php.net/manual/en/ini.php) config file.\n\n### stdio\n\nType: `string`  \nDefault: `'inherit'`\n\nNode's [stdio parameter](https://nodejs.org/api/child_process.html#child_process_options_stdio), set it to `'ignore'` to suppress all the logging into console of the php server process.\n\n### configCallback\n\nType: `function (type, collection) : collection`  \n\nPrototype:\n\n  - `type` - String, either `OPTIONS_SPAWN_OBJ` or `OPTIONS_PHP_CLI_ARR`.\n  - `collection` - Array or Object, the initial version of the collection specified by `type`.\n\n     Return: Optionally modified version of `collection`.\n\nDefault: `'null'` (Which is replaced with a no-op call that returns an unmodified version of the `collection` parameter)\n\nAllows the caller to modify the `spawn` [options](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) object and or the [PHP command line arguments](http://php.net/manual/en/features.commandline.options.php) (array) before the [PHP development server](http://php.net/manual/en/features.commandline.webserver.php) is invoked.\n\n### debug\n\nType: `boolean`\nDefault: `'false'`\n\nEnables debugging of the spawn call and its parameters.\n\n## Building\n\nThis package comes with a NPM run-script command called `prepack`. This is intended to be run before the packaging and pushing to NPM, however it is also what builds the Node 4.X compatibility script `index-compat.js`. Without it the default `package.json` will not execute properly.\n\n## License\n\nMIT Â© [Micah Blu](http://micahblu.net)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/micahblu/gulp-connect-php.git"
  },
  "scripts": {
    "__anchor": "cd .",
    "prepack": "npm run __anchor; ./convert.sh",
    "test": "npm run test-normative; npm run test-compat",
    "test-compat": "npm run __anchor; mocha ./test",
    "test-normative": "npm run __anchor; GCP_ES6=1 mocha ./test"
  },
  "version": "1.0.3"
}
